#+TITLE: Maiku's Emacs Configuration
#+AUTHOR: Miks Kalniņš
#+PROPERTY: header-args    :results silent

* Info
** Namespace

All custom functions, variables and macros are namespaced using ~mm/~
prefix.

** List of other Emacs configurations from which I find inspiration

- https://github.com/abo-abo/oremacs
- https://github.com/bbatsov/prelude
- https://github.com/overtone/emacs-live
- https://github.com/syl20bnr/spacemacs
- https://github.com/purcell/emacs.d
- http://doc.norang.ca/org-mode.html
- http://doc.rix.si/org/fsem.html
- http://writequit.org/org/settings.html
- http://mescal.imag.fr/membres/arnaud.legrand/misc/init.php
- http://pages.sachachua.com/.emacs.d/Sacha.html
- https://github.com/noahfrederick/dots/blob/master/emacs.d/emacs.org
- https://github.com/jonnay/emagicians-starter-kit/blob/master/Emagician-Org.org
- https://github.com/cycojesus/emacs/blob/master/babel-init.org
- https://github.com/samertm/.emacs.d
- https://github.com/magnars/.emacs.d
- http://tuhdo.github.io/emacs-tutor3.html
- https://github.com/grettke/home/blob/master/.emacs.el
- https://github.com/danielmai/.emacs.d/
- https://github.com/steckerhalter/steckemacs.el/blob/master/steckemacs.el

* Bootstrap
** Directories

I keep any Elisp files not installed from a package repository in the
=vendor/= directory:

#+BEGIN_SRC emacs-lisp
;; Nothing there yet so commented out.
;; (defvar mm/vendor-directory (concat user-emacs-directory "vendor/"))
;; (let ((default-directory mm/vendor-directory))
;;   (normal-top-level-add-to-load-path '("."))
;;   (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

** Packages

I use [[https://github.com/jwiegley/use-package][use-package]] to autoload packages and install them if needed, but
before I can use it, I need to install it and couple other
dependencies.

#+BEGIN_SRC emacs-lisp
(defvar use-package-verbose t)
(eval-when-compile
  (require 'use-package))
(require 'bind-key)
(require 'diminish)
#+END_SRC

* Configuration

Basic non-package configuration.

** Personal information

Tell Emacs a little bit about myself.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Miks Kalniņš")
(setq user-mail-address "mikskalnins@maikumori.com")
#+END_SRC

** Backups

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.saves")))
(setq make-backup-files t
      backup-by-copying t
      version-control t
      delete-old-versions t
      delete-by-moving-to-trash t
      kept-old-versions 6
      kept-new-versions 9
      auto-save-default t
      auto-save-timeout 20
      auto-save-interval 200)
#+END_SRC

** General key bindings

Enable some common keybindings.

#+BEGIN_SRC emacs-lisp
(bind-keys
  ("M-/" . hippie-expand)
  ("C-s" . isearch-forward-regexp)
  ("C-r" . isearch-backward-regexp)
  ("C-M-s" . isearch-forward)
  ("C-M-r" . isearch-backward))
#+END_SRC

Disable some keybindings that I don't use.

#+BEGIN_SRC emacs-lisp
;; Remove kill emacs keybind and minimize keybind.
(mm/on-frame
   (when (display-graphic-p frame)
     (global-unset-key (kbd "C-x C-c"))
     (global-unset-key (kbd "C-x C-z"))))
#+END_SRC

** Font

Trying out ~Source Code Pro~. I usually find it too wide, but lets
give it a proper try.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Source Code Pro"
                    :height 140
                    :weight 'normal
                    :width 'normal)
#+END_SRC

** Misc

Answering ~y~ and ~n~ is enough.

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Mouse ... can be useful sometimes.

#+BEGIN_SRC emacs-lisp
(xterm-mouse-mode t)
#+END_SRC

Prefer UTF-8 encoding.

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
#+END_SRC

And couple more things.

#+BEGIN_SRC emacs-lisp
(defun mm/bell-function ()
  "Filter out common things that cause bell and ignore them."
  (unless (memq this-command
        '(isearch-abort abort-recursive-edit exit-minibuffer
              keyboard-quit mwheel-scroll down up next-line previous-line
              backward-char forward-char))
    (ding)))

;; Keep cursor at same position when scrolling.
(setq scroll-preserve-screen-position 1)

;; I always have dark background.
(setq frame-background-mode 'dark)

;; Sentences end with ONE space.
;; Might add some custom `sentence-end` function later.
(setq sentence-end-double-space nil)

(setq-default cursor-type 'bar)
(setq-default indent-tabs-mode nil)
(setq x-select-enable-clipboard t
      default-tab-width 4
      tab-width 4
      tab-always-indent 'complete
      scroll-margin 3
      x-select-enable-primary t
      gc-cons-threshold 50000000
      save-interprogram-paste-before-kill t
      apropos-do-all t
      mouse-yank-at-point t
      require-final-newline t
      visible-bell nil
      ring-bell-function 'mm/bell-function
      load-prefer-newer t
      ediff-window-setup-function 'ediff-setup-windows-plain)

(mm/on-frame
 (when (display-graphic-p frame)
     (fringe-mode 8)))
;; More natural way of handling regions.
;; If text is selected and you type/paste the region is deleted.
(delete-selection-mode 1)
;; Auto revert if no changes in buffer.
(global-auto-revert-mode t)
;; Use human readable size in dired buffers.
(setq dired-listing-switches "-alh")
#+END_SRC

** Registers

Let's try storing common files in registers.

#+BEGIN_SRC emacs-lisp
(set-register ?e (cons 'file "~/dotfiles/emacs.d/maiku.org"))
(set-register ?t (cons 'file "~/Org/todo.org"))
(set-register ?r (cons 'file "~/Ledger/ledger.org"))
#+END_SRC

** AutoModeAlist extensions
*** Zsh and Prezto

~zsh~ and ~prezto~ related files.

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.zshrc\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("zshrc\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("\\.zshenv\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("zshenv\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("\\.zpreztorc\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("zpreztorc\\'" . sh-mode))
#+END_SRC

** Spellchecking

#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "aspell")
(setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

There is also [[http://ergoemacs.org/emacs/speck.el][speck.el]], maybe I'll try it at some point.

** Save on focus loss                                           :experiment:

This will save buffers as soon as Emacs loses focus. I've had the same
behavior in some other editors and it was fine apart from some small
hiccups.

#+BEGIN_SRC emacs-lisp
(defun mm/save-all ()
  (interactive)
  (save-some-buffers t))
(add-hook 'focus-out-hook 'mm/save-all)
#+END_SRC

** Highlight comment annotations

#+BEGIN_SRC emacs-lisp
;; Shamelessly stolen from and modified:
;; http://emacsredux.com/blog/2013/07/24/highlight-comment-annotations/
(defun mm/font-lock-comment-annotations ()
  "Highlight a bunch of well known comment annotations.

  This function should be added to the hooks of major modes for programming."
  (font-lock-add-keywords
   nil '(("\\<\\(FIX\\(ME\\)?\\|TODO\\|OPTIMIZE\\|XXX\\|HACK\\|REFACTOR\\):"
          1 font-lock-warning-face t))))

(add-hook 'prog-mode-hook 'mm/font-lock-comment-annotations)
#+END_SRC

** A comment-or-uncomment-sexp command

[[http://endlessparentheses.com/a-comment-or-uncomment-sexp-command.html][Source.]]

#+BEGIN_SRC emacs-lisp
(defun uncomment-sexp (&optional n)
  "Uncomment a sexp around point."
  (interactive "P")
  (let* ((initial-point (point-marker))
         (inhibit-field-text-motion t)
         (p)
         (end (save-excursion
                (when (elt (syntax-ppss) 4)
                  (re-search-backward comment-start-skip
                                      (line-beginning-position)
                                      t))
                (setq p (point-marker))
                (comment-forward (point-max))
                (point-marker)))
         (beg (save-excursion
                (forward-line 0)
                (while (and (not (bobp))
                            (= end (save-excursion
                                     (comment-forward (point-max))
                                     (point))))
                  (forward-line -1))
                (goto-char (line-end-position))
                (re-search-backward comment-start-skip
                                    (line-beginning-position)
                                    t)
                (ignore-errors
                  (while (looking-at-p comment-start-skip)
                    (forward-char -1)))
                (point-marker))))
    (unless (= beg end)
      (uncomment-region beg end)
      (goto-char p)
      ;; Indentify the "top-level" sexp inside the comment.
      (while (and (ignore-errors (backward-up-list) t)
                  (>= (point) beg))
        (skip-chars-backward (rx (syntax expression-prefix)))
        (setq p (point-marker)))
      ;; Re-comment everything before it.
      (ignore-errors
        (comment-region beg p))
      ;; And everything after it.
      (goto-char p)
      (forward-sexp (or n 1))
      (skip-chars-forward "\r\n[:blank:]")
      (if (< (point) end)
          (ignore-errors
            (comment-region (point) end))
        ;; If this is a closing delimiter, pull it up.
        (goto-char end)
        (skip-chars-forward "\r\n[:blank:]")
        (when (eq 5 (car (syntax-after (point))))
          (delete-indentation))))
    ;; Without a prefix, it's more useful to leave point where
    ;; it was.
    (unless n
      (goto-char initial-point))))

(defun comment-sexp--raw ()
  "Comment the sexp at point or ahead of point."
  (pcase (or (bounds-of-thing-at-point 'sexp)
             (save-excursion
               (skip-chars-forward "\r\n[:blank:]")
               (bounds-of-thing-at-point 'sexp)))
    (`(,l . ,r)
     (goto-char r)
     (skip-chars-forward "\r\n[:blank:]")
     (save-excursion
       (comment-region l r))
     (skip-chars-forward "\r\n[:blank:]"))))

(defun comment-or-uncomment-sexp (&optional n)
  "Comment the sexp at point and move past it.
If already inside (or before) a comment, uncomment instead.
With a prefix argument N, (un)comment that many sexps."
  (interactive "P")
  (if (or (elt (syntax-ppss) 4)
          (< (save-excursion
               (skip-chars-forward "\r\n[:blank:]")
               (point))
             (save-excursion
               (comment-forward 1)
               (point))))
      (uncomment-sexp n)
    (dotimes (_ (or n 1))
      (comment-sexp--raw))))

(global-set-key (kbd "C-M-;") #'comment-or-uncomment-sexp)
#+END_SRC

** Indent buffer

http://ensime.github.io/editors/emacs/hacks/#formatting

#+BEGIN_SRC emacs-lisp
(defun mm/indent-buffer ()
  "Indent the entire buffer."
  (interactive)
  (save-excursion
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max))))
#+END_SRC

** Open file as root

#+BEGIN_SRC emacs-lisp
(defun mm/open-as-root (&optional arg)
  "Edit currently visited file as root.

With a prefix ARG prompt for a file to visit.
Will also prompt for a file to visit if current
buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC

* Packages
** Personal
*** [[file:lisp/1188.el][1188.el]]

#+BEGIN_SRC emacs-lisp
(use-package "1188"
  :load-path "lisp"
  :commands helm-1188-lookup-transport)
#+END_SRC

** [[https://github.com/rranelli/auto-package-update.el][Auto-Package-Update]]

#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :ensure t
  :config
  (setq auto-package-update-interval 1)
  (auto-package-update-maybe))
#+END_SRC

** [[https://github.com/editorconfig/editorconfig-emacs][EditorConfig]]

#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+END_SRC

** [[Exec-Path-From-Shell]]

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  ;; This makes sure that zsh prezto doesn't start tmux and mess up
  ;; exec-path-from-shell.
  (setq exec-path-from-shell-arguments (list "-i")
        exec-path-from-shell-variables
        '("PATH" "MANPATH" "GOPATH" "GO15VENDOREXPERIMENT"))
  (setenv "EMACS" "t")
  (exec-path-from-shell-initialize))
#+END_SRC

** [[https://github.com/abo-abo/ace-window][Ace-Window]]

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :bind* (("s-q" . avy-goto-char-timer)
          ("s-w" . ace-window))
  :config
  (setq avi-keys
        '(?a ?s ?d ?e ?f ?h ?j ?k ?l ?n ?m ?v ?r ?u))
  (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l)))
#+END_SRC

** [[https://github.com/abo-abo/define-word][Define-Word]]

#+BEGIN_SRC emacs-lisp
(use-package define-word
  :ensure t
  :bind (("s-d" . define-word-at-point)
         ("s-D" . define-word)))
#+END_SRC

** [[https://github.com/oneKelvinSmith/monokai-emacs][Monokai-Emacs]]

I really like Monokai Theme so lets load it.

#+BEGIN_SRC emacs-lisp
(use-package monokai-theme
  :ensure t
  :config
  (load-theme 'monokai t))
#+END_SRC

** [[https://github.com/milkypostman/powerline][Powerline]]

I also like powerline so lets use that as well.

#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
  :config
  (powerline-default-theme))
#+END_SRC

** [[http://www.dr-qubit.org/emacs.php#undo-tree][Undo-Tree]]

This makes it much easier to undo things.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode)
  (setq undo-tree-visualizer-timestamps t
        undo-tree-visualizer-diff       t))
#+END_SRC

** [[https://github.com/magit/magit][Magit]]

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status)
  :init
  (setq magit-last-seen-setup-instructions "2.1.0")
  ;; Turn on Flyspell when writing commit messages.
  (add-hook 'git-commit-setup-hook #'git-commit-turn-on-flyspell))

(use-package magithub
  :ensure t
  :after magit
  :config (magithub-feature-autoinject t))
#+END_SRC

** [[https://github.com/emacs-helm/helm][Helm]]

#+BEGIN_SRC emacs-lisp
(use-package helm
    :ensure t)

(use-package helm-config
  :demand t
  :bind-keymap ("C-c h" . helm-command-prefix)
  :bind (("M-x" . helm-M-x)
         ("M-y" . helm-show-kill-ring)
         ("C-x b" . helm-mini)
         ("C-x C-f" . helm-find-files)
         ("C-x f" . helm-multi-files)
         :map helm-map
         ;; ("o" . helm-occur)
         ("<tab>" . helm-execute-persistent-action)
         ("C-i" . helm-execute-persistent-action)
         ("C-z" . helm-select-action)
         ;;("SPC" . helm-all-mark-rings)
         )
  :config
  (use-package helm-files)
  (use-package helm-buffers)
  (use-package helm-mode
    :diminish helm-mode
    :init
    (helm-mode 1))

  (helm-adaptive-mode 1)
  (helm-autoresize-mode 1)

  (unbind-key "C-x c")

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  (setq helm-mini-default-sources '(helm-source-buffers-list
                                    helm-source-recentf
                                    helm-source-bookmarks
                                    helm-source-buffer-not-found
                                    ))

  (setq helm-buffers-fuzzy-matching           t
        helm-recentf-fuzzy-match              t
        helm-locate-fuzzy-match               t
        helm-M-x-fuzzy-match                  t
        helm-apropos-fuzzy-match              t
        helm-split-window-in-side-p           t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-scroll-amount                    8
        helm-ff-file-name-history-use-recentf t))
#+END_SRC

*** [[https://github.com/emacs-helm/helm-descbinds][Helm-Descbinds]]

#+BEGIN_SRC emacs-lisp
(use-package helm-descbinds
  :ensure t
  :config
  (helm-descbinds-mode))
#+END_SRC

*** [[https://github.com/syohex/emacs-helm-ag][Helm-Ag]]

#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :ensure t)
#+END_SRC

** [[http://jblevins.org/projects/markdown-mode/][Markdown-mode]]

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\`README\\.md\\'" . gfm-mode)
         ("\\.md\\'"          . markdown-mode)
         ("\\.markdown\\'"    . markdown-mode)))
#+END_SRC

** [[https://github.com/jinzhu/zeal-at-point][Zeal-At-Point]]

#+BEGIN_SRC emacs-lisp
(use-package zeal-at-point
  :ensure t
  :bind (("C-c C-." . zeal-at-point))
  :config)
#+END_SRC

** [[https://github.com/lewang/ws-butler][WS-Buttler]]

Automatically removes trailing whitespaces.

#+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :ensure t
  :diminish ws-butler-mode
  :config
  (ws-butler-global-mode t))
#+END_SRC

** [[https://github.com/flycheck/flycheck][Flycheck]]

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :defer 2
  :config
  (defalias 'flycheck-show-error-at-point-soon 'flycheck-show-error-at-point)

  (use-package flycheck-pos-tip
    :ensure t)

  (defun disable-fylcheck-in-org-src-block ()
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

  (add-hook 'org-src-mode-hook 'disable-fylcheck-in-org-src-block)

  (use-package flycheck-color-mode-line
    :ensure t
    :config
    (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))

  (use-package flycheck-tip
    :ensure t)

  (global-flycheck-mode)
  (flycheck-pos-tip-mode))
#+END_SRC

** [[http://www.emacswiki.org/emacs/ParEdit][Paredit]]

#+BEGIN_SRC emacs-lisp
;; (use-package paredit
;;   :ensure t
;;   :commands paredit-mode
;;   :diminish paredit-mode
;;   :init
;;   (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
;;   (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
;;   (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
;;   (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
;;   (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
;;   (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
;;   (add-hook 'emacs-lisp-mode-hook       #'show-paren-mode))
#+END_SRC

** [[https://github.com/purcell/whole-line-or-region][Whole-Line-Or-Region]]

This one is a must have at least for me. I'm so used to ~cut~ cutting
whole line when no region is selected.

#+BEGIN_SRC emacs-lisp
(use-package whole-line-or-region
  :ensure t
  :diminish whole-line-or-region-mode
  :config
  (whole-line-or-region-mode t))
#+END_SRC

** [[https://github.com/defunkt/coffee-mode][Coffee-Mode]]

#+BEGIN_SRC emacs-lisp
(use-package coffee-mode
  :ensure t
  :init
  (setq flycheck-coffeelintrc "coffeelint.json")
  (setq coffee-tab-width 2)
  :mode "\\.coffee\\'")
#+END_SRC

** [[http://orgmode.org/][Org-Mode]]

#+BEGIN_SRC emacs-lisp
;; Very inspired by http://doc.norang.ca/org-mode.html
(use-package org
  :ensure t
  :bind (("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         ("C-c l" . org-store-link)
         :map org-mode-map
         ("<return>" . org-return-indent))
  :config
  :init
  (use-package org-plus-contrib
    :ensure t)
  (setq org-agenda-files (quote ("~/Org"))
        org-directory "~/Org"
        org-default-notes-file "~/Org/refile.org"
        org-tab-follows-link t
        org-startup-indented t
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        ;; This looks better with indent mode.
        org-src-preserve-indentation nil
        org-edit-src-content-indentation 0
        org-ellipsis " ↴"
        ;; Quickly change todo and don't trigger timestamps when using
        ;; shift+arrow keys.
        org-use-fast-todo-selection t
        org-yank-adjusted-subtrees t
        org-treat-S-cursor-todo-selection-as-state-change nil
        org-confirm-babel-evaluate nil
        org-reverse-note-order nil
        org-enforce-todo-dependencies t
        org-id-method (quote uuidgen)
        org-src-window-setup 'current-window
        org-refile-targets '((nil :maxlevel . 3)
                             (org-agenda-files :maxlevel . 3)))

  ;; Org modules.
  (setq org-modules '(;; org-bbdb
                      ;; org-gnus
                      ;; org-drill
                      org-info
                      ;; org-jsinfo
                      org-habit
                      ;; org-irc
                      ;; org-inlinetask
                      org-mouse
                      org-annotate-file
                      org-eval
                      org-expiry
                      org-interactive-query
                      ;; org-man
                      org-collector
                      org-panel
                      ;; org-screen
                      org-toc))
  ;; TODO keywords.
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))

  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING") ("HOLD" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

  ;; Capture templates for: TODO tasks, Notes, appointments, phone
  ;; calls, meetings, and org-protocol
  (setq org-capture-templates
        (quote (("t" "todo" entry (file "~/git/org/refile.org")
                 "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                ("r" "respond" entry (file "~/git/org/refile.org")
                 "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
                ("n" "note" entry (file "~/git/org/refile.org")
                 "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
                ("j" "Journal" entry (file+datetree "~/git/org/diary.org")
                 "* %?\n%U\n" :clock-in t :clock-resume t)
                ("w" "org-protocol" entry (file "~/git/org/refile.org")
                 "* TODO Review %c\n%U\n" :immediate-finish t)
                ("m" "Meeting" entry (file "~/git/org/refile.org")
                 "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                ("p" "Phone call" entry (file "~/git/org/refile.org")
                 "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
                ("h" "Habit" entry (file "~/git/org/refile.org")
                 "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))

  ;; Log when tasks are added.
  (defvar mm/insert-inactive-timestamp t)

  (defun mm/toggle-insert-inactive-timestamp ()
    (interactive)
    (setq mm/insert-inactive-timestamp (not mm/insert-inactive-timestamp))
    (message "Heading timestamps are %s" (if mm/insert-inactive-timestamp "ON" "OFF")))

  (defun mm/insert-inactive-timestamp ()
    (interactive)
    (org-insert-time-stamp nil t t nil nil nil))

  (defun mm/insert-heading-inactive-timestamp ()
    (save-excursion
      (when mm/insert-inactive-timestamp
        (org-return)
        (org-cycle)
        (mm/insert-inactive-timestamp))))

  (add-hook 'org-insert-heading-hook 'mm/insert-heading-inactive-timestamp 'append)

  :config
  (org-load-modules-maybe t)

  ;; Remove empty LOGBOOK drawers on clock out.
  (defun mm/remove-empty-drawer-on-clock-out ()
    (interactive)
    (save-excursion
      (beginning-of-line 0)
      (org-remove-empty-drawer-at (point))))

  (add-hook 'org-clock-out-hook 'mm/remove-empty-drawer-on-clock-out 'append)

  ;; NEXT is for tasks.
  (defun mm/mark-next-parent-tasks-todo ()
    "Visit each parent task and change NEXT states to TODO"
    (let ((mystate (or (and (fboundp 'org-state)
                            state)
                       (nth 2 (org-heading-components)))))
      (when mystate
        (save-excursion
          (while (org-up-heading-safe)
            (when (member (nth 2 (org-heading-components)) (list "NEXT"))
              (org-todo "TODO")))))))

  (add-hook 'org-after-todo-state-change-hook 'mm/mark-next-parent-tasks-todo 'append)
  (add-hook 'org-clock-in-hook 'mm/mark-next-parent-tasks-todo 'append)

  ;; Create unique IDs for tasks when linking.
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
  (setq org-clone-delete-id t)

  ;; Prevent editing invisible text.
  (setq org-catch-invisible-edits 'error)

  ;; Remove multiple state change log details from the agenda.
  (setq org-agenda-skip-additional-timestamps-same-entry t)

  ;; Logging.
  (setq org-log-done (quote time))
  (setq org-log-into-drawer t)

  ;; Warn about deadlines 2 weeks before.
  (setq org-deadline-warning-days 14)

  ;; Agenda.

  ;; Show all future entries for repeating tasks.
  (setq org-agenda-repeating-timestamp-show-all t)

  ;; Show all agenda dates - even if they are empty.
  (setq org-agenda-show-all-dates t)

  ;; Sorting order for tasks on the agenda
  (setq org-agenda-sorting-strategy
        (quote ((agenda habit-down time-up user-defined-up effort-up category-keep)
                (todo category-up effort-up)
                (tags category-up effort-up)
                (search category-up))))

  ;; Start the weekly agenda on Monday
  (setq org-agenda-start-on-weekday 1)

  ;; Enable display of the time grid so we can see the marker for the current time
  (setq org-agenda-time-grid (quote ((daily today remove-match)
                                     #("----------------" 0 16 (org-heading t))
                                     (0900 1100 1300 1500 1700))))

  ;; Display tags farther right
  (setq org-agenda-tags-column -102)

  ;; Agenda sorting functions
  (setq org-agenda-cmp-user-defined 'mm/agenda-sort)

  (defun mm/agenda-sort (a b)
    "Sorting strategy for agenda items. Late deadlines first,
then scheduled, then non-late deadlines"
    (let (result num-a num-b)
      (cond
       ;; Time specific items already sorted first by
       ;; org-agenda-sorting-strategy non-deadline and non-scheduled
       ;; items next.
       ((mm/agenda-sort-test 'mm/is-not-scheduled-or-deadline a b))
       ;; Deadlines for today next.
       ((mm/agenda-sort-test 'mm/is-due-deadline a b))
       ;; Late deadlines next.
       ((mm/agenda-sort-test-num 'mm/is-late-deadline '> a b))
       ;; Scheduled items for today next.
       ((mm/agenda-sort-test 'mm/is-scheduled-today a b))
       ;; Late scheduled items next.
       ((mm/agenda-sort-test-num 'mm/is-scheduled-late '> a b))
       ;; Pending deadlines last.
       ((mm/agenda-sort-test-num 'mm/is-pending-deadline '< a b))
       ;; Finally default to unsorted.
       (t (setq result nil)))
      result))

  (defmacro mm/agenda-sort-test (fn a b)
    "Test for agenda sort"
    `(cond
                                        ; if both match leave them unsorted
      ((and (apply ,fn (list ,a))
            (apply ,fn (list ,b)))
       (setq result nil))
                                        ; if a matches put a first
      ((apply ,fn (list ,a))
       (setq result -1))
                                        ; otherwise if b matches put b first
      ((apply ,fn (list ,b))
       (setq result 1))
                                        ; if none match leave them unsorted
      (t nil)))

  (defmacro mm/agenda-sort-test-num (fn compfn a b)
    `(cond
      ((apply ,fn (list ,a))
       (setq num-a (string-to-number (match-string 1 ,a)))
       (if (apply ,fn (list ,b))
           (progn
             (setq num-b (string-to-number (match-string 1 ,b)))
             (setq result (if (apply ,compfn (list num-a num-b))
                              -1
                            1)))
         (setq result -1)))
      ((apply ,fn (list ,b))
       (setq result 1))
      (t nil)))

  (defun mm/is-not-scheduled-or-deadline (date-str)
    (and (not (mm/is-deadline date-str))
         (not (mm/is-scheduled date-str))))

  (defun mm/is-due-deadline (date-str)
    (string-match "Deadline:" date-str))

  (defun mm/is-late-deadline (date-str)
    (string-match "\\([0-9]*\\) d\. ago:" date-str))

  (defun mm/is-pending-deadline (date-str)
    (string-match "In \\([^-]*\\)d\.:" date-str))

  (defun mm/is-deadline (date-str)
    (or (mm/is-due-deadline date-str)
        (mm/is-late-deadline date-str)
        (mm/is-pending-deadline date-str)))

  (defun mm/is-scheduled (date-str)
    (or (mm/is-scheduled-today date-str)
        (mm/is-scheduled-late date-str)))

  (defun mm/is-scheduled-today (date-str)
    (string-match "Scheduled:" date-str))

  (defun mm/is-scheduled-late (date-str)
    (string-match "Sched\.\\(.*\\)x:" date-str))


  ;; Org-Babel.
  (org-babel-do-load-languages
   (quote org-babel-load-languages)
   (quote ((emacs-lisp . t)
           (python . t)
           (shell . t)
           (ledger . t)
           (org . t)
           (latex . t))))


  ;; Custom agenda command definitions
  (setq org-agenda-custom-commands
        (quote (("N" "Notes" tags "NOTE"
                 ((org-agenda-overriding-header "Notes")
                  (org-tags-match-list-sublevels t)))
                ("h" "Habits" tags-todo "STYLE=\"habit\""
                 ((org-agenda-overriding-header "Habits")
                  (org-agenda-sorting-strategy
                   '(todo-state-down effort-up category-keep))))
                (" " "Agenda"
                 ((agenda "" nil)
                  (tags "REFILE"
                        ((org-agenda-overriding-header "Tasks to Refile")
                         (org-tags-match-list-sublevels nil)))
                  (tags-todo "-CANCELLED/!"
                             ((org-agenda-overriding-header "Stuck Projects")
                              (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-HOLD-CANCELLED/!"
                             ((org-agenda-overriding-header "Projects")
                              (org-agenda-skip-function 'bh/skip-non-projects)
                              (org-tags-match-list-sublevels 'indented)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-CANCELLED/!NEXT"
                             ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(todo-state-down effort-up category-keep))))
                  (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                             ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'bh/skip-non-project-tasks)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                             ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'bh/skip-project-tasks)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-CANCELLED+WAITING|HOLD/!"
                             ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'bh/skip-non-tasks)
                              (org-tags-match-list-sublevels nil)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
                  (tags "-REFILE/"
                        ((org-agenda-overriding-header "Tasks to Archive")
                         (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                         (org-tags-match-list-sublevels nil))))
                 nil))))


  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)

  ;; Compact the block agenda view
  (setq org-agenda-compact-blocks t)


  ;; Flyspell.
  (add-hook 'org-mode-hook 'turn-on-flyspell 'append)

  ;; http://endlessparentheses.com/ispell-and-org-mode.html
  (defun mm/org-ispell ()
    "Configure `ispell-skip-region-alist' for `org-mode'."
    (make-local-variable 'ispell-skip-region-alist)
    (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
    (add-to-list 'ispell-skip-region-alist '("~" "~"))
    (add-to-list 'ispell-skip-region-alist '("=" "="))
    (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC")))
  (add-hook 'org-mode-hook #'mm/org-ispell))
  #+END_SRC

*** [[https://github.com/sabof/org-bullets][Org-Bullets]]

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :commands org-bullets-mode
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

*** [[http://orgmode.org/worg/org-tutorials/encrypting-files.html][Org-Crypt]]

#+BEGIN_SRC emacs-lisp
(use-package org-crypt
  :config
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt"))
        org-crypt-key (quote "24481BFA")))
#+END_SRC

*** [[https://github.com/bastibe/org-journal][Org-Journal]]

#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :ensure t
  :config
  (setq org-journal-dir "~/Journal"
        org-journal-file-format "%Y-%m-%d.org"
        org-journal-enable-encryption t))
#+END_SRC

** [[https://github.com/company-mode/company-mode][Company]]

Auto-completion.

#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :diminish company-mode
  :commands company-mode
  :init
  (setq
   company-dabbrev-ignore-case nil
   company-dabbrev-code-ignore-case nil
   company-dabbrev-downcase nil
   company-idle-delay 0
   company-minimum-prefix-length 4)
  :config
  (global-company-mode)
  ;; disables TAB in company-mode, freeing it for yasnippet
  (define-key company-active-map [tab] nil)

  (use-package company-emoji
    :ensure t
    :config
    (company-emoji-init)))
#+END_SRC

*** [[https://github.com/nsf/gocode/tree/master/emacs-company][Company-Go]]

#+BEGIN_SRC emacs-lisp
(use-package company-go
  :ensure t
  :config
  (add-to-list 'company-backends 'company-go)

  (setq company-go-begin-after-member-access t
        company-go-show-annotation t))
#+END_SRC

** [[https://melpa.org/#/go-rename][Go-Rename]]

#+BEGIN_SRC emacs-lisp
(use-package go-rename
  :ensure t)
#+END_SRC

** [[https://github.com/dominikh/go-impl.el][Go-Impl]]

#+BEGIN_SRC emacs-lisp
(use-package go-impl
  :ensure t)
#+END_SRC

** [[https://github.com/benma/go-dlv.el][Go-Dvl]]

#+BEGIN_SRC emacs-lisp
(use-package go-dlv
  :ensure t)
#+END_SRC

** [[https://melpa.org/#/go-guru][Go-Guru]]

#+BEGIN_SRC emacs-lisp
(use-package go-guru
  :ensure t)
#+END_SRC

** [[https://github.com/syohex/emacs-go-eldoc][Go-Eldoc]]

#+BEGIN_SRC emacs-lisp
(use-package go-eldoc
  :ensure t
  :commands go-eldoc-setup
  :config
  (add-hook 'go-mode-hook 'go-eldoc-setup))
#+END_SRC

** [[https://github.com/moninikh/go-mode.el][Go-Mode]]

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :ensure t
  :mode "\\.go\\'"
  :bind ("M-." . godef-jump)
  :config
  (setq gofmt-command "goimports")
  (add-hook 'go-mode-hook
            (lambda ()
              (add-hook 'after-save-hook 'gofmt-before-save 'make-it-local))))
#+END_SRC

** [[https://github.com/yoshiki/yaml-mode][Yaml-Mode]]

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t
  :mode "\\.yml\\'")
#+END_SRC

** [[https://github.com/immerrr/lua-mode][Lua-Mode]]

#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :ensure t
  :mode "\\.lua\\'"
  :config
  (setq lua-indent-level 4))
#+END_SRC

** [[https://github.com/joshwnj/json-mode][Json-Mode]]

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :ensure t
  :mode "\\.json\\'")
#+END_SRC

** [[https://github.com/josteink/csharp-mode][CSharp-Mode
]]
#+BEGIN_SRC emacs-lisp
(use-package csharp-mode
  :ensure t)
#+END_SRC
** TypeScript
#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :ensure t)

(use-package tide
  :ensure t
  :config
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (tide-hl-identifier-mode +1)
  (setq company-tooltip-align-annotations t)
  (add-hook 'before-save-hook 'tide-format-before-save))
#+END_SRC
** [[https://github.com/syohex/emacs-terraform-mode][Emacs-Terraform-Mode]]

#+BEGIN_SRC emacs-lisp
(use-package terraform-mode
  :ensure t)
#+END_SRC

** [[https://github.com/capitaomorte/yasnippet][Yasnippet]]

Snippets

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  :commands yas-minor-mode
  :mode (("/\\.emacs\\.d/my-snippets/" . snippet-mode)
         ("/\\.emacs\\.d/yasnippets-snippets/" . snippet-mode))
  :init
  (setq yas-snippet-dirs
      '("~/.emacs.d/my-snippets"
        "~/.emacs.d/yasnippet-snippets"))
  :config
  (yas-reload-all)
  (yas-global-mode 1))
#+END_SRC

** [[https://github.com/justbur/emacs-which-key][Which-Key]]

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :config
  (which-key-mode))
#+END_SRC

** [[https://github.com/defunkt/gist.el][Gist]]

#+BEGIN_SRC emacs-lisp
(use-package gist
  :ensure t
  :defer t)
#+END_SRC

** [[https://github.com/vspinu/imenu-anywhere][Imenu-Anywhere]]

#+BEGIN_SRC emacs-lisp
(use-package imenu-anywhere
  :ensure t
  :bind ("C-." . helm-imenu-anywhere))
#+END_SRC

** [[https://github.com/magnars/multiple-cursors.el][Multiple-Cursors]]

Multiple cursors for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->"         . mc/mark-next-like-this)
         ("C-<"         . mc/mark-previous-like-this)
         ("C-c C->"     . mc/mark-all-like-this))
  :config
  (setq mc/list-file (expand-file-name "mc-lists.el" user-data-directory)))
#+END_SRC

** [[https://github.com/magnars/expand-region.el][Expand-Region]]

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :commands 'er/expand-region
  :bind (("C-=" . er/expand-region)
         ("C--" . er/contract-region)))
#+END_SRC

** [[https://github.com/Fanael/rainbow-delimiters][Rainbow-Delimiters]]

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :commands rainbow-delimiters-mode
  :init
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** [[https://github.com/holomorph/systemd-mode][Systemd]]
#+BEGIN_SRC emacs-lisp
(use-package systemd
  :ensure t)
#+END_SRC
** [[https://github.com/adamrt/sane-term][Sane-Term]]

A sane wrapper around `ansi-term`.

#+BEGIN_SRC emacs-lisp
(use-package sane-term
  :ensure t
  :bind (("C-c t" . sane-term)
         ("C-c T" . sane-term-create))
  :config
  (setq sane-term-shell-command "/bin/zsh"))
#+END_SRC

** [[https://github.com/Fuco1/smartparens][Smartparens]]

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :commands
  smartparens-mode
  show-smartparens-mode
  sp-restrict-to-pairs-interactive
  sp-local-pair
  smartparens-strict-mode
  :init
  (setq sp-interactive-dwim t)
  :config
  (use-package smartparens-config))
#+END_SRC

** [[https://github.com/mhayashi1120/Emacs-langtool][Emacs-Langtool]]

#+BEGIN_SRC emacs-lisp
(use-package langtool
  :ensure t
  :bind (("C-x 4 w" . langtool-check)
         ("C-x 4 W" . langtool-check-done)
         ("C-x 4 l" . langtool-switch-default-language)
         ("C-x 4 4" . langtool-show-message-at-point)
         ("C-x 4 c" . langtool-correct-buffer))
  :config
  (setq langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*"))
#+END_SRC

** [[https://github.com/syohex/emacs-zoom-window][Zoom-Window]]

#+BEGIN_SRC emacs-lisp
(use-package zoom-window
  :ensure t
  :bind ("C-x C-z" . zoom-window-zoom))
#+END_SRC

** [[https://github.com/bbatsov/projectile][Projectile]]

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode)
  (setq projectile-completion-system 'helm
        projectile-create-missing-test-files t)
  (use-package helm-projectile
    :ensure t
    :bind (("s-f" . helm-projectile-find-file)
           ("s-F" . helm-projectile-grep))
    :config
    (helm-projectile-on)))
#+END_SRC

** [[https://github.com/Silex/docker.el][Docker]]

#+BEGIN_SRC emacs-lisp
(use-package docker
  :ensure t)
#+END_SRC

** [[https://github.com/spotify/dockerfile-mode][Dockerfile-Mode]]

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :ensure t
  :mode "Dockerfile\\'")
#+END_SRC

** [[Https://github.com/dgutov/diff-hl][diff-hl]]

#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :ensure t
  :config
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+END_SRC

** [[https://github.com/mooz/js2-mode][js2-mode]]

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :mode "\\.js\\'"
  :interpreter ("node" . js2-mode)
  :config
  (setq-default js2-basic-offset 4
                js2-mode-show-parse-errors nil
                js2-mode-show-strict-warnings nil))
#+END_SRC

** [[https://github.com/fxbois/web-mode][Web-Mode]]

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :mode (("\\.phtml\\'" . web-mode)
         ("\\.tpl\\.php\\'" . web-mode)
         ("\\.[agj]sp\\'" . web-mode)
         ("\\.as[cp]x\\'" . web-mode)
         ("\\.erb\\'" . web-mode)
         ("\\.mustache\\'" . web-mode)
         ("\\.djhtml\\'" . web-mode)))

#+END_SRC

** [[https://github.com/d12frosted/flyspell-correct][Flyspell-Correct-Helm]]

#+BEGIN_SRC emacs-lisp
(use-package flyspell-correct-helm
  :ensure t
  :commands flyspell-correct-previous-word-generic
  :bind (:map flyspell-mode-map
              ;; ("M-$" . flyspell-correct-previous-word-generic)
              ("M-$" . flyspell-correct-word-before-point)))
#+END_SRC

** Clojure

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure t
  :config
  (add-hook 'clojure-mode-hook #'smartparens-mode))

(use-package cider
  :ensure t
  :config
  (add-hook 'cider-mode-hook #'eldoc-mode)
  (add-hook 'cider-repl-mode-hook #'smartparens-mode)
  (setq cider-prompt-for-symbol nil
        cider-repl-use-pretty-printing t
        cider-repl-use-clojure-font-lock t))

(use-package clj-refactor
  :ensure t
  :config
  (add-hook 'clojure-mode-hook (lambda () ((clj-refactor-mode 1)
                        (cljr-add-keybindings-with-prefix "C-c C-m")))))

(use-package clojure-cheatsheet
  :ensure t)

(use-package flycheck-clojure
  :ensure t
  :config
  (eval-after-load 'flycheck '(flycheck-clojure-setup)))
#+END_SRC

** TODO [[https://github.com/abo-abo/hydra][Hydra]]

This one looks nice.

** TODO [[https://github.com/syl20bnr/emacs-emoji-cheat-sheet-plus][Emacs-Emoji-Cheat-Sheet-Plus]]
[2015-07-11 Sat 01:23]

** TODO [[https://github.com/steckerhalter/discover-my-major][Discover-My-Major]]

Not sure about this one. I already have ~helm-descbinds~.

[2015-07-11 Sat 01:31]
* Notes
** TODO Notification: This could be useful later.

#+BEGIN_SRC emacs-lisp tangle: no
  ;; (require 'notifications)
  ;; (notifications-notify :title "Achtung!"
  ;;                       :body (format "You have an appointment in %d minutes" 10)
  ;;                       :app-name "Emacs: Org"
  ;;                       :sound-name "alarm-clock-elapsed")
#+END_SRC
