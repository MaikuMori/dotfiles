#+TITLE: Maiku's Emacs Configuration
#+AUTHOR: Miks Kalniņš
#+PROPERTY: header-args    :results silent

* Info
** Namespace

All custom functions, variables and macros are namespaced using ~mm/~
prefix.

** List of other Emacs configurations from which I find inspiration

- https://github.com/abo-abo/oremacs
- https://github.com/bbatsov/prelude
- https://github.com/overtone/emacs-live
- https://github.com/syl20bnr/spacemacs
- https://github.com/purcell/emacs.d
- http://doc.norang.ca/org-mode.html
- http://doc.rix.si/org/fsem.html
- http://writequit.org/org/settings.html
- http://mescal.imag.fr/membres/arnaud.legrand/misc/init.php
- http://pages.sachachua.com/.emacs.d/Sacha.html
- https://github.com/noahfrederick/dots/blob/master/emacs.d/emacs.org
- https://github.com/jonnay/emagicians-starter-kit/blob/master/Emagician-Org.org
- https://github.com/cycojesus/emacs/blob/master/babel-init.org
- https://github.com/samertm/.emacs.d
- https://github.com/magnars/.emacs.d
- http://tuhdo.github.io/emacs-tutor3.html
- https://github.com/grettke/home/blob/master/.emacs.el
- https://github.com/danielmai/.emacs.d/

* Bootstrap
** Directories

I keep any Elisp files not installed from a package repository in the
=vendor/= directory:

#+BEGIN_SRC emacs-lisp
;; Nothing there yet so commented out.
;; (defvar mm/vendor-directory (concat user-emacs-directory "vendor/"))
;; (let ((default-directory mm/vendor-directory))
;;   (normal-top-level-add-to-load-path '("."))
;;   (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

** Packages

I use [[https://github.com/jwiegley/use-package][use-package]] to autoload packages and install them if needed, but
before I can use it, I need to install it and couple other
dependencies.

#+BEGIN_SRC emacs-lisp
(defvar use-package-verbose t)
(eval-when-compile
  (require 'use-package))
(require 'bind-key)
(require 'diminish)
#+END_SRC

* Configuration

Basic non-package configuration.

** Personal information

Tell Emacs a little bit about myself.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Miks Kalniņš")
(setq user-mail-address "mikskalnins@maikumori.com")
#+END_SRC

** Backups

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.saves")))
(setq make-backup-files t
      backup-by-copying t
      version-control t
      delete-old-versions t
      delete-by-moving-to-trash t
      kept-old-versions 6
      kept-new-versions 9
      auto-save-default t
      auto-save-timeout 20
      auto-save-interval 200)
#+END_SRC

** General key bindings

#+BEGIN_SRC emacs-lisp
(bind-keys
  ("M-/" . hippie-expand)
  ("C-s" . isearch-forward-regexp)
  ("C-r" . isearch-backward-regexp)
  ("C-M-s" . isearch-forward)
  ("C-M-r" . isearch-backward))
#+END_SRC

** Font

Trying out ~Source Code Pro~. I usually find it too wide, but lets
give it a proper try.

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Source Code Pro for Powerline"
                    :height 120
                    :weight 'normal
                    :width 'normal)
#+END_SRC

** Misc

Answering ~y~ and ~n~ is enough.

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Mouse ... can be useful sometimes.

#+BEGIN_SRC emacs-lisp
(xterm-mouse-mode t)
#+END_SRC

Prefer UTF-8 encoding.

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
#+END_SRC

And couple more things.

#+BEGIN_SRC emacs-lisp
(defun mm/bell-function ()
  "Filter out common things that cause bell and ignore them."
  (unless (memq this-command
        '(isearch-abort abort-recursive-edit exit-minibuffer
              keyboard-quit mwheel-scroll down up next-line previous-line
              backward-char forward-char))
    (ding)))

;;keep cursor at same position when scrolling
(setq scroll-preserve-screen-position 1)

;; Sentences end with ONE space.
;; Might add some custom `sentence-end` function later.
(setq sentence-end-double-space nil)

(setq-default cursor-type 'bar)
(setq-default indent-tabs-mode nil)
(setq x-select-enable-clipboard t
      tab-width 4
      x-select-enable-primary t
      gc-cons-threshold 50000000
      save-interprogram-paste-before-kill t
      apropos-do-all t
      mouse-yank-at-point t
      require-final-newline t
      visible-bell nil
      ring-bell-function 'mm/bell-function
      load-prefer-newer t
      ediff-window-setup-function 'ediff-setup-windows-plain)
(fringe-mode 8)
;; More natural way of handling regions.
;; If text is selected and you type/paste the region is deleted.
(delete-selection-mode 1)
;; Auto revert if no changes in buffer.
(global-auto-revert-mode t)
;; Use human readable size in dired buffers.
(setq dired-listing-switches "-alh")
#+END_SRC

** AutoModeAlist extensions
*** Zsh and Prezto

~zsh~ and ~prezto~ related files.

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.zshrc\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("zshrc\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("\\.zpreztorc\\'" . sh-mode))
(add-to-list 'auto-mode-alist '("zpreztorc\\'" . sh-mode))
#+END_SRC

** Spellchecking

#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "aspell")
(setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC

There is also [[http://ergoemacs.org/emacs/speck.el][speck.el]], maybe I'll try it at some point.

** Save on focus loss                                           :experiment:

This will save buffers as soon as Emacs loses focus. I've had the same
behavior in some other editors and it was fine apart from some small
hiccups.

#+BEGIN_SRC emacs-lisp
(defun mm/save-all ()
  (interactive)
  (save-some-buffers t))
(add-hook 'focus-out-hook 'mm/save-all)
#+END_SRC

** Highlight comment annotations

#+BEGIN_SRC emacs-lisp
;; Shamelessly stolen from and modified:
;; http://emacsredux.com/blog/2013/07/24/highlight-comment-annotations/
(defun mm/font-lock-comment-annotations ()
  "Highlight a bunch of well known comment annotations.

  This function should be added to the hooks of major modes for programming."
  (font-lock-add-keywords
   nil '(("\\<\\(FIX\\(ME\\)?\\|TODO\\|OPTIMIZE\\|XXX\\|HACK\\|REFACTOR\\):"
          1 font-lock-warning-face t))))

(add-hook 'prog-mode-hook 'mm/font-lock-comment-annotations)
#+END_SRC

** A comment-or-uncomment-sexp command

[[http://endlessparentheses.com/a-comment-or-uncomment-sexp-command.html][Source.]]

#+BEGIN_SRC emacs-lisp
(defun uncomment-sexp (&optional n)
  "Uncomment a sexp around point."
  (interactive "P")
  (let* ((initial-point (point-marker))
         (inhibit-field-text-motion t)
         (p)
         (end (save-excursion
                (when (elt (syntax-ppss) 4)
                  (re-search-backward comment-start-skip
                                      (line-beginning-position)
                                      t))
                (setq p (point-marker))
                (comment-forward (point-max))
                (point-marker)))
         (beg (save-excursion
                (forward-line 0)
                (while (and (not (bobp))
                            (= end (save-excursion
                                     (comment-forward (point-max))
                                     (point))))
                  (forward-line -1))
                (goto-char (line-end-position))
                (re-search-backward comment-start-skip
                                    (line-beginning-position)
                                    t)
                (ignore-errors
                  (while (looking-at-p comment-start-skip)
                    (forward-char -1)))
                (point-marker))))
    (unless (= beg end)
      (uncomment-region beg end)
      (goto-char p)
      ;; Indentify the "top-level" sexp inside the comment.
      (while (and (ignore-errors (backward-up-list) t)
                  (>= (point) beg))
        (skip-chars-backward (rx (syntax expression-prefix)))
        (setq p (point-marker)))
      ;; Re-comment everything before it.
      (ignore-errors
        (comment-region beg p))
      ;; And everything after it.
      (goto-char p)
      (forward-sexp (or n 1))
      (skip-chars-forward "\r\n[:blank:]")
      (if (< (point) end)
          (ignore-errors
            (comment-region (point) end))
        ;; If this is a closing delimiter, pull it up.
        (goto-char end)
        (skip-chars-forward "\r\n[:blank:]")
        (when (eq 5 (car (syntax-after (point))))
          (delete-indentation))))
    ;; Without a prefix, it's more useful to leave point where
    ;; it was.
    (unless n
      (goto-char initial-point))))

(defun comment-sexp--raw ()
  "Comment the sexp at point or ahead of point."
  (pcase (or (bounds-of-thing-at-point 'sexp)
             (save-excursion
               (skip-chars-forward "\r\n[:blank:]")
               (bounds-of-thing-at-point 'sexp)))
    (`(,l . ,r)
     (goto-char r)
     (skip-chars-forward "\r\n[:blank:]")
     (save-excursion
       (comment-region l r))
     (skip-chars-forward "\r\n[:blank:]"))))

(defun comment-or-uncomment-sexp (&optional n)
  "Comment the sexp at point and move past it.
If already inside (or before) a comment, uncomment instead.
With a prefix argument N, (un)comment that many sexps."
  (interactive "P")
  (if (or (elt (syntax-ppss) 4)
          (< (save-excursion
               (skip-chars-forward "\r\n[:blank:]")
               (point))
             (save-excursion
               (comment-forward 1)
               (point))))
      (uncomment-sexp n)
    (dotimes (_ (or n 1))
      (comment-sexp--raw))))

(global-set-key (kbd "C-M-;") #'comment-or-uncomment-sexp)
#+END_SRC
** Open file as root

#+BEGIN_SRC emacs-lisp
(defun mm/open-as-root (filename)
  "Open file as root."
  (interactive)
  (find-file (concat "/sudo:root@localhost:"  filename)))

(defun mm/open-buffer-as-root ()
  "Reopen current buffer as root."
 (interactive)
 (let
     (
      ;; Get the current buffer file name
      (filename (buffer-file-name (current-buffer)))
      ;; Get the current file name
      (bufname  (buffer-name (current-buffer)))
     )
   (progn
  (kill-buffer bufname)         ;; Kill current buffer
  (open-as-root filename))))    ;; Open File as root
#+END_SRC

* Packages
** Personal
*** [[file:lisp/1188.el][1188.el]]

#+BEGIN_SRC emacs-lisp
(use-package "1188"
  :load-path "lisp"
  :commands helm-1188-lookup-transport)
#+END_SRC
** [[Exec-Path-From-Shell]]

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :init
  ;; This makes sure that zsh prezto doesn't start tmux and mess up
  ;; exec-path-from-shell.
  (setenv "EMACS" "t")
  (setq exec-path-from-shell-arguments '("-i"))
  (when (memq window-system '(mac ns x))
           (exec-path-from-shell-initialize)))
#+END_SRC

** [[https://github.com/abo-abo/ace-window][Ace-Window]]

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind* (("s-q" . avy-goto-char-timer)
          ("s-w" . ace-window))
  :config
  (setq avi-keys
        '(?a ?s ?d ?e ?f ?h ?j ?k ?l ?n ?m ?v ?r ?u))
  (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l)))
#+END_SRC

** [[https://github.com/oneKelvinSmith/monokai-emacs][Monokai-Emacs]]

I really like Monokai Theme so lets load it.

#+BEGIN_SRC emacs-lisp
(load-theme 'monokai t)
#+END_SRC

** [[https://github.com/milkypostman/powerline][Powerline]]

I also like powerline so lets use that as well.

#+BEGIN_SRC emacs-lisp
(use-package powerline
  :config
  (powerline-default-theme))
#+END_SRC

** [[http://www.dr-qubit.org/emacs.php#undo-tree][Undo-Tree]]

This makes it much easier to undo things.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode)
  (setq undo-tree-visualizer-timestamps t
        undo-tree-visualizer-diff       t))
#+END_SRC

** [[https://github.com/magit/magit][Magit]]

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status)
  :init
  (setq magit-last-seen-setup-instructions "2.1.0")

  (defun mm/add-PR-fetch ()
    "If refs/pull is not defined on a GH repo, define it."
    (let ((fetch-address
           "+refs/pull/*/head:refs/pull/origin/*")
          (magit-remotes
           (magit-get-all "remote" "origin" "fetch")))
      (unless (or (not magit-remotes)
                  (member fetch-address magit-remotes))
        (when (string-match
               "github" (magit-get "remote" "origin" "url"))
          (magit-git-string
           "config" "--add" "remote.origin.fetch"
           fetch-address)))))

  (defun mm/visit-pull-request-url ()
    "Visit the current branch's PR on Github."
    (interactive)
    (browse-url
     (format "https://github.com/%s/pull/new/%s"
             (replace-regexp-in-string
              "\\`.+github\\.com:\\(.+\\)\\.git\\'" "\\1"
              (magit-get "remote"
                         (magit-get-remote)
                         "url"))
             (cdr (magit-get-remote-branch)))))

  :config
  ;; Bind visit pull request page on GitHub.
  (bind-keys :map magit-mode-map
             ("v" . mm/visit-pull-request-url))
  ;; When commiting enable verbose mode by default.
  (setq magit-commit-arguments (quote ("--verbose")))
  ;; Turn on Flyspell when writing commit messages.
  (add-hook 'git-commit-setup-hook #'git-commit-turn-on-flyspell)
  ;; Http://endlessparentheses.com/automatically-configure-magit-to-access-github-prs.html
  (add-hook 'magit-mode-hook #'mm/add-PR-fetch))
#+END_SRC

** [[https://github.com/emacs-helm/helm][Helm]]

#+BEGIN_SRC emacs-lisp
(use-package helm-config
  :demand t
  :bind-keymap ("C-c h" . helm-command-prefix)
  :bind (("M-x" . helm-M-x)
         ("M-y" . helm-show-kill-ring)
         ("C-x b" . helm-mini)
         ("C-x C-f" . helm-find-files)
         ("C-x f" . helm-multi-files))

  :config
  (use-package helm-commands)
  (use-package helm-files)
  (use-package helm-buffers)
  (use-package helm-mode
    :diminish helm-mode
    :init
    (helm-mode 1))

  ;; https://github.com/emacs-helm/helm-ls-git
  (use-package helm-ls-git)

  (helm-adaptative-mode 1)
  (helm-autoresize-mode 1)

  (bind-keys :map helm-map
             ;; ("o" . helm-occur)
             ("<tab>" . helm-execute-persistent-action)
             ("C-i" . helm-execute-persistent-action)
             ("C-z" . helm-select-action)
             ;; ("SPC" . helm-all-mark-rings)
             )

  (unbind-key "C-x c")

  (when (executable-find "ack")
    (setq helm-grep-default-command "ack -Hn --no-group --no-color %e %p %f"
          helm-grep-default-recurse-command "ack -H --no-group --no-color %e %p %f"))

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t))

  (setq helm-mini-default-sources '(helm-source-buffers-list
                                    helm-source-recentf
                                    helm-source-bookmarks
                                    helm-source-buffer-not-found
                                    ))

  (setq helm-buffers-fuzzy-matching           t
        helm-recentf-fuzzy-match              t
        helm-locate-fuzzy-match               t
        helm-M-x-fuzzy-match                  t
        helm-apropos-fuzzy-match              t
        helm-split-window-in-side-p           t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-scroll-amount                    8
        helm-ff-file-name-history-use-recentf t))
#+END_SRC

*** [[https://github.com/emacs-helm/helm-descbinds][Helm-Descbinds]]

#+BEGIN_SRC emacs-lisp
(use-package helm-descbinds
  :config
  (helm-descbinds-mode))
#+END_SRC

*** TODO Add `:map helm-map` when map keyword is implemented.

** [[http://jblevins.org/projects/markdown-mode/][Markdown-mode]]

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode (("\\`README\\.md\\'" . gfm-mode)
         ("\\.md\\'"          . markdown-mode)
         ("\\.markdown\\'"    . markdown-mode)))
#+END_SRC

** [[https://github.com/lewang/ws-butler][WS-Buttler]]

Automatically removes trailing whitespaces.

#+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :diminish ws-butler-mode
  :config
  (ws-butler-global-mode t))
#+END_SRC

** [[https://github.com/flycheck/flycheck][Flycheck]]

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :defer 3
  :config
  (defalias 'flycheck-show-error-at-point-soon 'flycheck-show-error-at-point)

  (use-package flycheck-cask
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-cask-setup))

  (use-package flycheck-color-mode-line
    :config
    (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))

  (use-package flycheck-tip
    :config
    (flycheck-tip-use-timer 'verbose))

  (global-flycheck-mode t))
#+END_SRC

*** TODO Disable it in some modes (like Org+Src)

** [[http://www.emacswiki.org/emacs/ParEdit][Paredit]]

#+BEGIN_SRC emacs-lisp
(use-package paredit
  :commands paredit-mode
  :diminish paredit-mode
  :init
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  (add-hook 'emacs-lisp-mode-hook       #'show-paren-mode))
#+END_SRC

** [[https://github.com/purcell/whole-line-or-region][Whole-Line-Or-Region]]

This one is a must have at least for me. I'm so used to ~cut~ cutting
whole line when no region is selected.

#+BEGIN_SRC emacs-lisp
(use-package whole-line-or-region
  :diminish whole-line-or-region-mode
  :config
  (whole-line-or-region-mode t))
#+END_SRC

** [[https://github.com/defunkt/coffee-mode][Coffee-Mode]]

#+BEGIN_SRC emacs-lisp
(use-package coffee-mode
  :init
  (setq flycheck-coffeelintrc "coffeelint.json")
  (setq coffee-tab-width 2)
  :mode "\\.coffee\\'")
#+END_SRC

** [[http://orgmode.org/][Org-Mode]]

#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind (("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           ("C-c l" . org-store-link))
    :init
    (setq org-agenda-files (quote ("~/Org"))
          org-directory "~/Org"
          org-default-notes-file "~/Org/refile.org"
          org-tab-follows-link t
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-confirm-babel-evaluate nil
          org-src-window-setup 'current-window
          org-refile-targets '((nil :maxlevel . 3)
                               (org-agenda-files :maxlevel . 3)))

    (setq org-expiry-inactive-timestamps t)

    (setq org-modules '(org-bbdb
                        org-gnus
                        org-drill
                        org-info
                        org-jsinfo
                        org-habit
                        org-irc
                        org-mouse
                        org-annotate-file
                        org-eval
                        org-expiry
                        org-interactive-query
                        org-man
                        org-collector
                        org-panel
                        org-screen
                        org-toc))
    :config
    (org-load-modules-maybe t))
#+END_SRC

*** [[https://github.com/sabof/org-bullets][Org-Bullets]]

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :commands org-bullets-mode
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

** [[http://orgmode.org/worg/org-tutorials/encrypting-files.html][Org-Crypt]]

#+BEGIN_SRC emacs-lisp
(use-package org-crypt
  :config
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt"))
        org-crypt-key (quote "24481BFA")))
#+END_SRC

** [[https://github.com/bastibe/org-journal][Org-Journal]]

#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :config
  (setq org-journal-dir "~/Journal"
        org-journal-file-format "%Y-%m-%d.org"
        org-journal-enable-encryption t))
#+END_SRC

** [[https://github.com/company-mode/company-mode][Company]]

Auto-completion.

#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :config
  (global-company-mode)
  (use-package company-emoji
    :config
    (company-emoji-init)))
#+END_SRC

*** [[https://github.com/nsf/gocode/tree/master/emacs-company][Company-Go]]

#+BEGIN_SRC emacs-lisp
(use-package company-go
  :config
  (add-to-list 'company-backends 'company-go)

  (setq company-go-begin-after-member-access t
        company-go-show-annotation t))
#+END_SRC

** [[https://github.com/moninikh/go-mode.el][Go-Mode]]

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :mode "\\.go\\'"
  :bind ("M-." . godef-jump)
  :config
  (setq gofmt-command "goimports")
  (exec-path-from-shell-copy-env "GOPATH")
  (add-hook 'go-mode-hook
            (lambda ()
              (add-hook 'after-save-hook 'gofmt-before-save 'make-it-local))))
#+END_SRC

** [[https://github.com/syohex/emacs-go-eldoc][Go-Eldoc]]

#+BEGIN_SRC emacs-lisp
(use-package go-eldoc
  :commands go-eldoc-setup
  :config
  (add-hook 'go-mode-hook 'go-eldoc-setup))
#+END_SRC

** [[https://github.com/capitaomorte/yasnippet][Yasnippet]]

Snippets

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :mode ("/\\.emacs\\.d/snippets/" . snippet-mode)
  :config
  (yas-load-directory "~/.emacs.d/snippets/")
  (yas-global-mode 1))
#+END_SRC

*** TODO Add custom snippets.

** [[https://github.com/justbur/emacs-which-key][Which-Key]]

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config
  (which-key-mode))
#+END_SRC

** [[https://github.com/defunkt/gist.el][Gist]]

#+BEGIN_SRC emacs-lisp
(use-package gist
  :defer t)
#+END_SRC

** [[https://github.com/vspinu/imenu-anywhere][Imenu-Anywhere]]

#+BEGIN_SRC emacs-lisp
(use-package imenu-anywhere
  :bind ("C-." . helm-imenu-anywhere))
#+END_SRC
** [[https://github.com/magnars/multiple-cursors.el][Multiple-Cursors]]

Multiple cursors for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->"         . mc/mark-next-like-this)
           ("C-<"         . mc/mark-previous-like-this)
           ("C-c C-<"     . mc/mark-all-like-this))
    :config
    (setq mc/list-file (expand-file-name "mc-lists.el" user-data-directory)))
#+END_SRC

** [[https://github.com/magnars/expand-region.el][Expand-Region]]

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind (("C-=" . er/expand-region)
         ("C--" . er/contract-region)))
#+END_SRC

** [[https://github.com/Fanael/rainbow-delimiters][Rainbow-Delimiters]]

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :commands rainbow-delimiters-mode
  :init
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** [[https://github.com/holomorph/systemd-mode][Systemd]]
#+BEGIN_SRC emacs-lisp
(use-package systemd)
#+END_SRC
** [[https://github.com/adamrt/sane-term][Sane-Term]]

A sane wrapper around `ansi-term`.

#+BEGIN_SRC emacs-lisp
(use-package sane-term
  :bind (("C-c t" . sane-term)
         ("C-c T" . sane-term-create))
  :config
  (setq sane-term-shell-command "/bin/zsh"))
#+END_SRC

** [[https://github.com/Fuco1/smartparens][Smartparens]]
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :commands (smartparens-mode show-smartparens-mode)
  :config
  (use-package smartparens-config))
#+END_SRC
** [[https://github.com/mhayashi1120/Emacs-langtool][Emacs-Langtool]]

#+BEGIN_SRC emacs-lisp
(use-package langtool
  :bind (("C-x 4 w" . langtool-check)
         ("C-x 4 W" . langtool-check-done)
         ("C-x 4 l" . langtool-switch-default-language)
         ("C-x 4 4" . langtool-show-message-at-point)
         ("C-x 4 c" . langtool-correct-buffer))
  :config
  (setq langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*"))
#+END_SRC

** [[https://github.com/bbatsov/projectile][Projectile]]
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (projectile-global-mode)
  (setq projectile-completion-system 'helm)
  (use-package helm-projectile
    :config
    (helm-projectile-on)))
#+END_SRC
** TODO [[https://github.com/fxbois/web-mode][Web-Mode]]

[2015-07-11 Sat 01:24]
** TODO Setup [[https://github.com/dgutov/diff-hl][diff-hl]]
** TODO [[https://github.com/doitian/iy-go-to-char][Iy-Go-To-Char]]

Go to next CHAR which is similar to ~f~ and ~t~ in Vim.

** TODO [[https://github.com/abo-abo/hydra][Hydra]]

This one looks nice.

** TODO [[https://github.com/syl20bnr/emacs-emoji-cheat-sheet-plus][Emacs-Emoji-Cheat-Sheet-Plus]]
[2015-07-11 Sat 01:23]

** TODO [[https://github.com/steckerhalter/discover-my-major][Discover-My-Major]]

Not sure about this one. I already have ~helm-descbinds~.

[2015-07-11 Sat 01:31]
* Notes
** TODO Notification: This could be useful later.

#+BEGIN_SRC emacs-lisp tangle: no
  ;; (require 'notifications)
  ;; (notifications-notify :title "Achtung!"
  ;;                       :body (format "You have an appointment in %d minutes" 10)
  ;;                       :app-name "Emacs: Org"
  ;;                       :sound-name "alarm-clock-elapsed")
#+END_SRC
