#+TITLE: Maiku's Emacs Configuration
#+AUTHOR: Miks Kalniņš

* Info

** Namespace

All custom functions, variables and macros are namespaced using ~mm/~
prefix.

* Bootstrap

** Directories

I keep any Elisp files not installed from a package repository in the
=vendor/= directory:

#+BEGIN_SRC emacs-lisp
  (defvar mm/vendor-directory (concat user-emacs-directory "vendor/"))
  (let ((default-directory mm/vendor-directory))
    (normal-top-level-add-to-load-path '("."))
    (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

** Packages

I use [[https://github.com/jwiegley/use-package][use-package]] to autoload packages and install them if needed, but
before I can use it, I need to install it and couple other
dependencies.

#+BEGIN_SRC emacs-lisp
  (defvar use-package-verbose t)
  (eval-when-compile
    (require 'use-package))
  (require 'bind-key)
  (require 'diminish)
#+END_SRC

* Configuration

Basic non-package configuration.

** Personal information

Tell Emacs a little bit about myself.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Miks Kalniņš")
  (setq user-mail-address "mikskalnins@maikumori.com")
#+END_SRC

** Disable silly things

Disable menu and toolbars, scrollbar and startup splash screen.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
#+END_SRC

** Backups

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.saves")))
  (setq make-backup-files t
        backup-by-copying t
        version-control t
        delete-old-versions t
        delete-by-moving-to-trash t
        kept-old-versions 6
        kept-new-versions 9
        auto-save-default t
        auto-save-timeout 20
        auto-save-interval 200)
#+END_SRC

** Keybindings

#+BEGIN_SRC emacs-lisp
  (bind-keys
    ("M-/" . hippie-expand)
    ("C-s" . isearch-forward-regexp)
    ("C-r" . isearch-backward-regexp)
    ("C-M-s" . isearch-forward)
    ("C-M-r" . isearch-backward))
#+END_SRC

** Misc

Answering ~y~ and ~n~ is enough.

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Mouse ... can be useful sometimes.

#+BEGIN_SRC emacs-lisp
  (xterm-mouse-mode t)
#+END_SRC

And couple more things.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq x-select-enable-clipboard t
        x-select-enable-primary t
        gc-cons-threshold 50000000
        save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t
        require-final-newline t
        visible-bell t
        load-prefer-newer t
        ediff-window-setup-function 'ediff-setup-windows-plain)
#+END_SRC

** Systemd files

~conf-unix-mode~ is fine for now. There is also [[https://github.com/holomorph/systemd-mode][systemd-mode]].

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.service\\'" . conf-unix-mode))
  (add-to-list 'auto-mode-alist '("\\.timer\\'" . conf-unix-mode))
  (add-to-list 'auto-mode-alist '("\\.target\\'" . conf-unix-mode))
  (add-to-list 'auto-mode-alist '("\\.mount\\'" . conf-unix-mode))
  (add-to-list 'auto-mode-alist '("\\.automount\\'" . conf-unix-mode))
  (add-to-list 'auto-mode-alist '("\\.slice\\'" . conf-unix-mode))
  (add-to-list 'auto-mode-alist '("\\.socket\\'" . conf-unix-mode))
  (add-to-list 'auto-mode-alist '("\\.path\\'" . conf-unix-mode))
  (add-to-list 'auto-mode-alist '("\\.netdev\\'" . conf-unix-mode))
  (add-to-list 'auto-mode-alist '("\\.network\\'" . conf-unix-mode))
  (add-to-list 'auto-mode-alist '("\\.link\\'" . conf-unix-mode))
  (add-to-list 'auto-mode-alist '("\\.automount\\'" . conf-unix-mode))
#+END_SRC

* Packages

** [[https://github.com/oneKelvinSmith/monokai-emacs][Monokai-Emacs]]

I really like Monokai Theme so lets load it.

#+BEGIN_SRC emacs-lisp
  (load-theme 'monokai t)
#+END_SRC

** [[https://github.com/milkypostman/powerline][Powerline]]

I also like powerline so lets use that as well.

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :config
    (powerline-default-theme))
#+END_SRC

** [[http://www.dr-qubit.org/emacs.php#undo-tree][Undo-Tree]]

This makes it much easier to undo things.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t
          undo-tree-visualizer-diff       t))
#+END_SRC

** [[https://github.com/magit/magit][Magit]]

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :init
    (setq magit-last-seen-setup-instructions "1.4.0")
    :config
    ;; Full screen magit-status.
    (add-hook 'magit-log-edit-mode-hook
              #'(lambda ()
                  (set-fill-column 72)
                  (flyspell-mode))))
#+END_SRC

** [[https://github.com/emacs-helm/helm][Helm]]

#+BEGIN_SRC emacs-lisp
  (use-package helm-config
    :demand t
    :bind-keymap ("C-c h" . helm-command-prefix)
    :bind (("M-x" . helm-M-x)
           ("M-y" . helm-show-kill-ring)
           ("C-x b" . helm-mini)
           ("C-x C-f" . helm-find-files)
           ("C-x f" . helm-multi-files))

    :config
    (use-package helm-commands)
    (use-package helm-files)
    (use-package helm-buffers)
    (use-package helm-mode
      :diminish helm-mode
      :init
      (helm-mode 1))

    (helm-adaptative-mode 1)
    (helm-autoresize-mode 1)

    (bind-keys :map helm-map
               ;; ("o" . helm-occur)
               ("<tab>" . helm-execute-persistent-action)
               ("C-i" . helm-execute-persistent-action)
               ("C-z" . helm-select-action))

    (unbind-key "C-x c")

    (when (executable-find "ack")
      (setq helm-grep-default-command "ack -Hn --no-group --no-color %e %p %f"
            helm-grep-default-recurse-command "ack -H --no-group --no-color %e %p %f"))

    (when (executable-find "curl")
      (setq helm-google-suggest-use-curl-p t))

    (setq helm-mini-default-sources '(helm-source-buffers-list
                                      helm-source-recentf
                                      helm-source-bookmarks
                                      helm-source-buffer-not-found
                                      ))

    (setq helm-buffers-fuzzy-matching           t
          helm-recentf-fuzzy-match              t
          helm-split-window-in-side-p           t
          helm-move-to-line-cycle-in-source     t
          helm-ff-search-library-in-sexp        t
          helm-scroll-amount                    8
          helm-ff-file-name-history-use-recentf t))
#+END_SRC

*** TODO Add `:map helm-map` when map keyword is implemented.

** [[http://jblevins.org/projects/markdown-mode/][Markdown-mode]]

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode (("\\`README\\.md\\'" . gfm-mode)
           ("\\.md\\'"          . markdown-mode)
           ("\\.markdown\\'"    . markdown-mode)))
#+END_SRC

** [[https://github.com/lewang/ws-butler][WS-Buttler]]

Automatically removes trailing whitespaces.

#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :diminish ws-butler-mode
    :config
    (ws-butler-global-mode t))
#+END_SRC

** [[https://github.com/flycheck/flycheck][Flycheck]]

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :defer 3
    :config
    (defalias 'flycheck-show-error-at-point-soon 'flycheck-show-error-at-point)

    (use-package flycheck-cask
      :config
      (add-hook 'flycheck-mode-hook #'flycheck-cask-setup))

    (use-package flycheck-color-mode-line
      :config
      (add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))

    (global-flycheck-mode t))
#+END_SRC

*** TODO Disable it in some modes (like Org+Src)

** [[http://www.emacswiki.org/emacs/ParEdit][Paredit]]

#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :commands paredit-mode
    :diminish paredit-mode
    :init
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode)

    (add-hook 'emacs-lisp-mode-hook       #'show-paren-mode))
#+END_SRC

** [[https://github.com/purcell/whole-line-or-region][Whole-Line-Or-Region]]

This one is a must have at least for me. I'm so used to ~cut~ cutting
whole line when no region is selected.

#+BEGIN_SRC emacs-lisp
  (use-package whole-line-or-region
    :diminish whole-line-or-region-mode
    :config
    (whole-line-or-region-mode t))
#+END_SRC

** [[https://github.com/defunkt/coffee-mode][Coffee-Mode]]

#+BEGIN_SRC emacs-lisp
  (use-package coffee-mode
    :init
    (setq coffee-tab-width 2)
    :mode "\\.coffee\\'")
#+END_SRC

** [[https://github.com/moninikh/go-mode.el][Go-Mode]]

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :mode "\\.go\\'")
#+END_SRC

** [[http://orgmode.org/][Org-Mode]]

#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind (("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           ("C-c l" . org-store-link))
    :init
    (setq org-agenda-files (quote ("~/Org"))
          org-directory "~/Org"
          org-default-notes-file "~/Org/refile.org"
          org-tab-follows-link t
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-confirm-babel-evaluate nil
          org-src-window-setup 'current-window
          org-refile-targets '((nil :maxlevel . 3)
                               (org-agenda-files :maxlevel . 3))))
#+END_SRC

** TODO [[https://github.com/magnars/multiple-cursors.el][Multiple-Cursors]]

Multiple cursors for emacs.

** TODO [[https://github.com/doitian/iy-go-to-char][Iy-Go-To-Char]]

Go to next CHAR which is similar to ~f~ and ~t~ in Vim.

** TODO [[https://github.com/abo-abo/hydra][Hydra]]

This one looks nice.
